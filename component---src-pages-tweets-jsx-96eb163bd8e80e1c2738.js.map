{"version":3,"sources":["webpack:///./src/pages/tweets.jsx"],"names":["GeneratedTweets","getState","props","tweets","canLoadMore","loadingTweets","error","demoActive","user","queryString","parse","location","search","currentPage","count","getDerivedStateFromProps","state","componentDidUpdate","this","fetchTweets","demoTweets","generateTweets","fetch","method","then","res","json","tweet_arr","length","setState","_tweets","i","push","tweet","key","concat","catch","Index"],"mappings":"sLAMMA,E,wLACJC,SAAA,SAASC,GACP,MAAO,CACLC,OAAQ,GACRC,aAAa,EACbC,eAAe,EACfC,OAAO,EACPC,WAAYL,EAAMK,WAClBC,KAAMC,IAAYC,MAAMR,EAAMS,SAASC,QAAQJ,KAC/CK,YAAa,EACbC,MAAO,I,EAIJC,yBAAP,SAAgCb,EAAOc,GACrC,IAAIR,EAAOC,IAAYC,MAAMR,EAAMS,SAASC,QAAQJ,KAEpD,OAAIA,IAASQ,EAAMR,MAAQQ,EAAMT,aAAeL,EAAMK,WAC7C,CACLJ,OAAQ,GACRC,aAAa,EACbC,eAAe,EACfC,OAAO,EACPC,WAAYL,EAAMK,WAClBC,KAAMA,EACNK,YAAa,EACbC,MAAO,GAIF,M,EAIXG,mBAAA,WACMC,KAAKF,MAAMZ,aAAoC,IAArBc,KAAKF,MAAMF,OACvCI,KAAKC,e,EAITA,YAAA,WACMD,KAAKF,MAAMT,WACbW,KAAKE,aAGLF,KAAKG,kB,EAITA,eAAA,WAAkB,IAAD,OACfC,MAAM,gEAAkEJ,KAAKF,MAAMR,KAAM,CAAEe,OAAQ,QAChGC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACqB,IAArBA,EAAUC,QACZ,EAAKC,SAAS,CACZzB,aAAa,EACbC,eAAe,EACfC,OAAO,IAMX,IAFA,IAAIwB,EAAU,GAELC,EAAI,EAAGA,EAAIJ,EAAUC,SAAUG,EACtCD,EAAQE,KAAK,kBAAC,IAAD,CAAOC,MAAON,EAAUI,GAAIG,IAAKH,EAAI,EAAKf,MAAMF,SAG/D,EAAKe,SAAS,CACZ1B,OAAQ,EAAKa,MAAMb,OAAOgC,OAAOL,GACjCzB,eAAe,EACfS,MAAO,EAAKE,MAAMF,MAAQa,EAAUC,YAGvCQ,OAAM,SAAA9B,GACL,EAAKuB,SAAS,CACZzB,aAAa,EACbC,eAAe,EACfC,OAAO,Q,EAKfc,WAAA,WAAc,IAAD,OACXE,MAAM,4DAA8DJ,KAAKF,MAAMR,KAAO,IAAMU,KAAKF,MAAMH,YAAa,CAAEU,OAAQ,QAC3HC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACqB,IAArBA,EAAUC,QACZ,EAAKC,SAAS,CACZzB,aAAa,EACbC,eAAe,EACfC,OAAO,IAMX,IAFA,IAAIwB,EAAU,GAELC,EAAI,EAAGA,EAAIJ,EAAUC,SAAUG,EACtCD,EAAQE,KAAK,kBAAC,IAAD,CAAOC,MAAON,EAAUI,GAAIG,IAAKH,EAAI,EAAKf,MAAMF,SAG/D,EAAKe,SAAS,CACZ1B,OAAQ,EAAKa,MAAMb,OAAOgC,OAAOL,GACjCzB,eAAe,EACfQ,YAAa,EAAKG,MAAMH,YAAc,EACtCC,MAAO,EAAKE,MAAMF,MAAQa,EAAUC,YAGvCQ,OAAM,SAAA9B,GACL,EAAKuB,SAAS,CACZzB,aAAa,EACbC,eAAe,EACfC,OAAO,Q,GA/Ga+B,WAqHfrC","file":"component---src-pages-tweets-jsx-96eb163bd8e80e1c2738.js","sourcesContent":["import React from \"react\"\nimport queryString from 'query-string'\n\nimport Index from \"./index.jsx\"\nimport Tweet from \"../components/tweet\"\n\nclass GeneratedTweets extends Index {\n  getState(props) {\n    return {\n      tweets: [],\n      canLoadMore: true,\n      loadingTweets: true,\n      error: false,\n      demoActive: props.demoActive,\n      user: queryString.parse(props.location.search).user,\n      currentPage: 0,\n      count: 0\n    }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    let user = queryString.parse(props.location.search).user\n\n    if (user !== state.user || state.demoActive !== props.demoActive) {\n      return {\n        tweets: [],\n        canLoadMore: true,\n        loadingTweets: true,\n        error: false,\n        demoActive: props.demoActive,\n        user: user,\n        currentPage: 0,\n        count: 0\n      }\n    }\n    else {\n      return null\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.state.canLoadMore && this.state.count === 0) {\n      this.fetchTweets()\n    }\n  }\n\n  fetchTweets() {\n    if (this.state.demoActive) {\n      this.demoTweets()\n    }\n    else {\n      this.generateTweets()\n    }\n  }\n\n  generateTweets() {\n    fetch('https://infinite-scroll-is-not-enough.herokuapp.com/generate/' + this.state.user, { method: 'Get' })\n      .then(res => res.json())\n      .then(tweet_arr => {\n        if (tweet_arr.length === 0) {\n          this.setState({\n            canLoadMore: false,\n            loadingTweets: false,\n            error: true \n          })\n        }\n        \n        let _tweets = []\n\n        for (let i = 0; i < tweet_arr.length; ++i) {\n          _tweets.push(<Tweet tweet={tweet_arr[i]} key={i + this.state.count} />)\n        }\n\n        this.setState({\n          tweets: this.state.tweets.concat(_tweets),\n          loadingTweets: false,\n          count: this.state.count + tweet_arr.length\n        })\n      })\n      .catch(error => {\n        this.setState({\n          canLoadMore: false,\n          loadingTweets: false,\n          error: true \n        })\n      })\n  }\n\n  demoTweets() {\n    fetch('https://infinite-scroll-is-not-enough.herokuapp.com/demo/' + this.state.user + '/' + this.state.currentPage, { method: 'Get' })\n      .then(res => res.json())\n      .then(tweet_arr => {\n        if (tweet_arr.length === 0) {\n          this.setState({\n            canLoadMore: false,\n            loadingTweets: false,\n            error: true \n          })\n        }\n\n        let _tweets = []\n\n        for (let i = 0; i < tweet_arr.length; ++i) {\n          _tweets.push(<Tweet tweet={tweet_arr[i]} key={i + this.state.count} />)\n        }\n\n        this.setState({\n          tweets: this.state.tweets.concat(_tweets),\n          loadingTweets: false,\n          currentPage: this.state.currentPage + 1,\n          count: this.state.count + tweet_arr.length\n        })\n      })\n      .catch(error => {\n        this.setState({\n          canLoadMore: false,\n          loadingTweets: false,\n          error: true \n        })\n      })\n  }\n}\n\nexport default GeneratedTweets\n\n"],"sourceRoot":""}