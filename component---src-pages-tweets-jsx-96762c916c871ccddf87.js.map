{"version":3,"sources":["webpack:///./src/pages/tweets.jsx"],"names":["GeneratedTweets","getDerivedStateFromProps","props","state","user","queryString","parse","location","search","demoActive","tweets","canLoadMore","loadingTweets","error","currentPage","count","componentDidUpdate","this","fetchTweets","getState","demoTweets","generateTweets","fetch","method","then","res","json","tweet_arr","length","setState","_tweets","i","push","tweet","key","concat","catch","Index"],"mappings":"sLAaMA,E,+JAGGC,yBAAP,SAAgCC,EAAOC,GACrC,IAAIC,EAAOC,IAAYC,MAAMJ,EAAMK,SAASC,QAAQJ,KAEpD,OAAIA,IAASD,EAAMC,MAAQF,EAAMO,aAAeN,EAAMM,WAC7C,CACLC,OAAQ,GACRC,aAAa,EACbC,eAAe,EACfC,OAAO,EACPJ,WAAYP,EAAMO,WAClBL,KAAMA,EACNU,YAAa,EACbC,MAAO,GAIF,M,2BAKXC,mBAAA,WACMC,KAAKd,MAAMQ,aAAoC,IAArBM,KAAKd,MAAMY,OACvCE,KAAKC,e,EAKTC,SAAA,SAASjB,GACP,MAAO,CACLQ,OAAQ,GACRC,aAAa,EACbC,eAAe,EACfC,OAAO,EACPJ,WAAYP,EAAMO,WAClBL,KAAMC,IAAYC,MAAMJ,EAAMK,SAASC,QAAQJ,KAC/CU,YAAa,EACbC,MAAO,I,EAKXG,YAAA,WACMD,KAAKd,MAAMM,WACbQ,KAAKG,aAGLH,KAAKI,kB,EAKTA,eAAA,WAAkB,IAAD,OACfC,MAAM,gEAAgEL,KAAKd,MAAMC,KAAQ,CAAEmB,OAAQ,QAChGC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACqB,IAArBA,EAAUC,QACZ,EAAKC,SAAS,CACZlB,aAAa,EACbC,eAAe,EACfC,OAAO,IAMX,IAFA,IAAIiB,EAAU,GAELC,EAAI,EAAGA,EAAIJ,EAAUC,SAAUG,EACtCD,EAAQE,KAAK,kBAAC,IAAD,CAAOC,MAAON,EAAUI,GAAIG,IAAKH,EAAI,EAAK5B,MAAMY,SAG/D,EAAKc,SAAS,CACZnB,OAAQ,EAAKP,MAAMO,OAAOyB,OAAOL,GACjClB,eAAe,EACfG,MAAO,EAAKZ,MAAMY,MAAQY,EAAUC,YAGvCQ,OAAM,SAAAvB,GACL,EAAKgB,SAAS,CACZlB,aAAa,EACbC,eAAe,EACfC,OAAO,Q,EAMfO,WAAA,WAAc,IAAD,OACXE,MAAM,4DAA4DL,KAAKd,MAAMC,KAAxE,IAAgFa,KAAKd,MAAMW,YAAe,CAAES,OAAQ,QACtHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACqB,IAArBA,EAAUC,QACZ,EAAKC,SAAS,CACZlB,aAAa,EACbC,eAAe,EACfC,OAAO,IAMX,IAFA,IAAIiB,EAAU,GAELC,EAAI,EAAGA,EAAIJ,EAAUC,SAAUG,EACtCD,EAAQE,KAAK,kBAAC,IAAD,CAAOC,MAAON,EAAUI,GAAIG,IAAKH,EAAI,EAAK5B,MAAMY,SAG/D,EAAKc,SAAS,CACZnB,OAAQ,EAAKP,MAAMO,OAAOyB,OAAOL,GACjClB,eAAe,EACfE,YAAa,EAAKX,MAAMW,YAAc,EACtCC,MAAO,EAAKZ,MAAMY,MAAQY,EAAUC,YAGvCQ,OAAM,SAAAvB,GACL,EAAKgB,SAAS,CACZlB,aAAa,EACbC,eAAe,EACfC,OAAO,Q,GAtHawB,WA4HfrC","file":"component---src-pages-tweets-jsx-96762c916c871ccddf87.js","sourcesContent":["import React from \"react\"\nimport queryString from \"query-string\"\n\nimport Index from \"./index.jsx\"\nimport Tweet from \"../components/tweet\"\n\n/*\n * Generated Tweets Page\n * \n * Used to display generated tweets for a specified user. Makes API\n * requests to the backend to continuously serve new tweets. Handles\n * changing API endpoint for demo mode.\n */\nclass GeneratedTweets extends Index {\n  // Checks for change in props, used for when user\n  // generates tweets for new user or toggles demo mode\n  static getDerivedStateFromProps(props, state) {\n    let user = queryString.parse(props.location.search).user\n\n    if (user !== state.user || props.demoActive !== state.demoActive) {\n      return {\n        tweets: [],\n        canLoadMore: true,\n        loadingTweets: true,\n        error: false,\n        demoActive: props.demoActive,\n        user: user,\n        currentPage: 0,\n        count: 0\n      }\n    }\n    else {\n      return null\n    }\n  }\n\n  // Initial fetch call if change in user or demo mode toggled\n  componentDidUpdate() {\n    if (this.state.canLoadMore && this.state.count === 0) {\n      this.fetchTweets()\n    }\n  }\n\n  // Retrieves state object - overriden for derived pages\n  getState(props) {\n    return {\n      tweets: [],\n      canLoadMore: true,\n      loadingTweets: true,\n      error: false,\n      demoActive: props.demoActive,\n      user: queryString.parse(props.location.search).user,\n      currentPage: 0,\n      count: 0\n    }\n  }\n\n  // Fetches tweets from backend API - overriden for derived pages\n  fetchTweets() {\n    if (this.state.demoActive) {\n      this.demoTweets() // Demo mode active\n    }\n    else {\n      this.generateTweets() // Generative mode active\n    }\n  }\n\n  // Fetch tweets by generating from user's tweet history\n  generateTweets() {\n    fetch(`https://infinite-scroll-is-not-enough.herokuapp.com/generate/${this.state.user}`, { method: 'Get' })\n      .then(res => res.json())\n      .then(tweet_arr => {\n        if (tweet_arr.length === 0) {\n          this.setState({\n            canLoadMore: false,\n            loadingTweets: false,\n            error: true \n          })\n        }\n        \n        let _tweets = []\n\n        for (let i = 0; i < tweet_arr.length; ++i) {\n          _tweets.push(<Tweet tweet={tweet_arr[i]} key={i + this.state.count} />)\n        }\n\n        this.setState({\n          tweets: this.state.tweets.concat(_tweets),\n          loadingTweets: false,\n          count: this.state.count + tweet_arr.length\n        })\n      })\n      .catch(error => {\n        this.setState({\n          canLoadMore: false,\n          loadingTweets: false,\n          error: true \n        })\n      })\n  }\n\n  // Fetch tweets from demo database\n  demoTweets() {\n    fetch(`https://infinite-scroll-is-not-enough.herokuapp.com/demo/${this.state.user}/${this.state.currentPage}`, { method: 'Get' })\n      .then(res => res.json())\n      .then(tweet_arr => {\n        if (tweet_arr.length === 0) {\n          this.setState({\n            canLoadMore: false,\n            loadingTweets: false,\n            error: true \n          })\n        }\n\n        let _tweets = []\n\n        for (let i = 0; i < tweet_arr.length; ++i) {\n          _tweets.push(<Tweet tweet={tweet_arr[i]} key={i + this.state.count} />)\n        }\n\n        this.setState({\n          tweets: this.state.tweets.concat(_tweets),\n          loadingTweets: false,\n          currentPage: this.state.currentPage + 1,\n          count: this.state.count + tweet_arr.length\n        })\n      })\n      .catch(error => {\n        this.setState({\n          canLoadMore: false,\n          loadingTweets: false,\n          error: true \n        })\n      })\n  }\n}\n\nexport default GeneratedTweets\n\n"],"sourceRoot":""}