import React, { useState, useEffect } from "react"
import { CSSTransition } from "react-transition-group"

import { Comments, Retweet, Liked, Share, Settings } from "./icons"

import "../styles/modal.scss"

// Clears local storage (theme selection, search history, like history)
function clearLocalStorage() {
  if (typeof window !== `undefined`) {
    window.localStorage.clear()
    window.location.reload()
  }
}

/*
 * Modal Component
 * 
 * Contains settings for user including toggling light/dark theme,
 * toggle demo/generate mode, and clearing all settings (local storage)
 * as well as about/instructions for app + link to GitHub repo
 */
const Modal = ({ showModal, closeModal, demoActive, toggleDemo }) => {
  const [darkMode, toggleDarkMode] = useState(
    (typeof window !== `undefined`)
      // Chcek if stored in local storage already
      ? ((window.localStorage.getItem('ui-dark-mode') === 'on') || false)
      : false
  )

  useEffect(() => {
    if (typeof window !== `undefined`) {
      // Set preference in local storage
      window.localStorage.setItem('ui-dark-mode', darkMode ? 'on' : 'off')
    }
  })
  
  if (typeof document !== `undefined`) {
    // Toggle light/dark mode by adding/removing class to html element
    if (darkMode) {
      document.getElementsByTagName('html')[0].classList.add('ui-dark-mode')
    }
    else {
      document.getElementsByTagName('html')[0].classList.remove('ui-dark-mode')
    }
  }

  return (
    <>
      <CSSTransition
        appear={true}
        in={showModal}
        timeout={100}>

        <div className={`modal-background`}>
          <div className={`modal-content`}>
            <h1 className={`info-header title`}>{'Infinite Scroll Is Not Enough'}</h1>
            <div className={`info-body`}>

              <h1 className={`info-header settings`}>{`Settings`}</h1>
              <div className={`info-settings`}>

                <span className={`info-button theme-toggle`} onClick={() => toggleDarkMode( ! darkMode )}>
                  <span className={`toggle-option light-theme`}>{`Light Theme`}</span>
                  <span className={`toggle-option dark-theme`}>{`Dark Theme`}</span>
                </span>

                <span className={`info-button demo-toggle` + (demoActive ? ` demo-active` : ``)} onClick={toggleDemo}>
                  <span className={`toggle-option demo`}>{`Demo Mode`}</span>
                  <span className={`toggle-option generate`}>{`Generate Mode`}</span>
                </span>

                <span className={`info-button clear-cache`} onClick={() => clearLocalStorage()}>{`Clear Cache`}</span>

              </div>

              {/* <div className={`dark-mode-toggle`}>
                <span className={`light-toggle`} onClick={() => toggleDarkMode( ! darkMode )} />
              </div> */}

              <h1 className={`info-header about`}>{`About`}</h1>
              <div className={`info-about`}>
                {/* <p className={`warn`}>{`Notice: Tweet generation has been disabled`}</p> */}
                <p className={`left`}>{`In these uncertain times, many of us have turned to social media, especially Twitter, to fill our lives with entertainment while a pandemic sends ripples of unease through the masses.`}</p>
                <p className={`left`}>{`Unfortunately, a person can only produce so many tweets, and if you were to scroll through an individual's Twitter profile for long enough, reaching the end is inevitable.`}</p>
                <p className={`left`}>{`If you have found yourself in such a predicament, rejoice! You have stumbled upon the solution to all your problems! 'Infinite Scroll Is Not Enough' lets you generate tweets using an advanced Neural Language Model AI which generates tweets based on your favorite Twitter user's tweet history.`}</p>
                <p className={`left`}>{`Let's get through some of the basics of using this web app. On the home page you'll see the most liked tweets that have been generated by our app. So when you like a tweet, you can expect it to be displayed on the home page for others to enjoy. Liking a tweet works exactly the same as Twitter. Simply click the`}{Liked}{`icon on any tweet that you may have found to be interesting, humorous or whatever other reason you might like a tweet.`}</p>
                <p className={`left`}>{`You can also share tweets that you may have liked by clicking the`}{Share}{`icon. This will also make it discoverable by other users perusing the home page.`}</p>
                <p className={`left`}>{`Each tweet that is generated began from a prompt. We choose a random tweet from your desired user to be the prompt for your generated tweets. If you click the`}{Comments}{`icon on a given tweet, it'll show you the exact tweet that was used to generate the tweet you're viewing. Neat! Clicking on the prompt will link you to the actual tweet on Twitter.com`}</p>
                <p className={`left`}>{`Please note that the`}{Retweet}{`icon is purely decorative and is non-functional.`}</p>
                <p className={`left`}>{`You can also find some settings in the dialogue popup above. There is a toggle button to change between light and dark theme, which match Twitter's own themes as closely as possible. We also have a toggle to choose between demo mode and generate mode. The problem with generating tweets is it becomes very expensive to do it quickly, so we're limited by the amount of resources we have available to use. Demo mode will pull from a database of pre-generated tweets for a set of specific users to demonstrate how we expect the app should work, assuming we were able to afford the server resources to pull it off. The user's that can currently be used are: @pixelatedboat, @danadonly, @jaboukie and @RachelMComedy`}</p>
                <p className={`left`}>{`In order to generate tweets for a specific user, simply use the search bar in the center of the top bar to type in the user's Twitter handle, and then enjoy the tweets! Simply keep scrolling to continuously generate tweets for that user for as long as you need to get your fix!`}</p>
                <p className={`left`}>{`You can always click the Twitter icon in the upper left corner to return to the home page or click the`}{Settings}{`icon in the upper right corner order to view this popup again.`}</p>
                <p className={`warn`}>{`As a note of caution, please be aware that the tweets generated by this app are not reflective of the Twitter user whose tweets were used the generate them. The AI used in this application was trained on many other distinct sources that influence its text generation.`}</p>
                <p className={`warn`}>{`This is a school project that was created for educational purposes only.`}</p>
                <p className={`credits`}>{`Contributors: Jonathan, Xuejin, Benjamin, Ka Ming`}</p>
                <p className={`credits`}>{`Check out our GitHub repo `}<a href="https://github.com/jkelaty/infinite-scroll-is-not-enough" target="_blank" noopener="true" rel="noreferrer" >{`here!`}</a></p>
              </div>

            </div>
            <button className={`close-modal`} onClick={closeModal}>{`Close`}</button>
          </div>
        </div>

      </CSSTransition>
    </>
  )
}

export default Modal

